#!/bin/bash

# IntelliJ Action CLI
# Direct HTTP interface to IntelliJ actions
# Usage: ij <action> [action2] [action3] ...
# Example: ij About
# Example: ij SaveAll ReformatCode

# Custom server (no rate limiting)
CUSTOM_API="http://localhost:63343/api/intellij-actions"
# Built-in IntelliJ API (may have rate limiting)
BUILTIN_API="http://localhost:63342/api/intellij-actions"

# Check for flags
FORCE_BUILTIN=false
DISCOVERY_MODE=""
DETACH_MODE=false
QUIET_MODE=false
FORCE_MODE=false
CONDITIONAL_MODE=""
IF_CHECK=""
THEN_ACTIONS=""
ELSE_ACTIONS=""

# Parse short flags first (e.g., -dqf)
while [[ "$1" == -* ]] && [[ "$1" != --* ]]; do
    # Handle short conditional flags
    case "$1" in
        -ie)
            IF_CHECK="editor"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        -if)
            IF_CHECK="file"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        -ip)
            IF_CHECK="project"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        -ia)
            shift
            IF_CHECK="$1:enabled"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        -iw)
            shift
            IF_CHECK="$1:window"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        -*)
            # Handle combined short flags like -dqf
            FLAGS="${1#-}"
            for (( i=0; i<${#FLAGS}; i++ )); do
                FLAG="${FLAGS:$i:1}"
                case "$FLAG" in
                    d) DETACH_MODE=true ;;
                    q) QUIET_MODE=true ;;
                    f) FORCE_MODE=true ;;
                    *) echo "Unknown flag: -$FLAG"; exit 1 ;;
                esac
            done
            shift
            ;;
    esac
done

# Parse long flags
while [[ "$1" == --* ]]; do
    case "$1" in
        --if-editor)
            IF_CHECK="editor"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        --if-file)
            IF_CHECK="file"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        --if-project)
            IF_CHECK="project"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        --if-action|--if-enabled)
            shift
            IF_CHECK="$1:enabled"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        --if-window)
            shift
            IF_CHECK="$1:window"
            CONDITIONAL_MODE="if-then-else"
            shift
            ;;
        --then)
            shift
            THEN_ACTIONS="$1"
            shift
            ;;
        --else)
            shift
            ELSE_ACTIONS="$1"
            shift
            ;;
        --detach)
            DETACH_MODE=true
            shift
            ;;
        --quiet)
            QUIET_MODE=true
            shift
            ;;
        --force)
            FORCE_MODE=true
            shift
            ;;
        --force-builtin)
            FORCE_BUILTIN=true
            shift
            ;;
        --search)
            DISCOVERY_MODE="search"
            shift
            break
            ;;
        --explain)
            DISCOVERY_MODE="explain"
            shift
            break
            ;;
        --list)
            DISCOVERY_MODE="list"
            shift
            break
            ;;
        --history)
            DISCOVERY_MODE="history"
            shift
            break
            ;;
        --stats)
            DISCOVERY_MODE="stats"
            shift
            break
            ;;
        --suggestions)
            DISCOVERY_MODE="suggestions"
            shift
            break
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Handle discovery modes
if [ -n "$DISCOVERY_MODE" ]; then
    case "$DISCOVERY_MODE" in
        search)
            if [ $# -eq 0 ]; then
                echo "Usage: ij --search <query>"
                exit 1
            fi
            curl -s "${CUSTOM_API}/search?q=$1" | jq '.'
            exit 0
            ;;
        explain)
            if [ $# -eq 0 ]; then
                echo "Usage: ij --explain <action>"
                exit 1
            fi
            curl -s "${CUSTOM_API}/explain?action=$1" | jq '.'
            exit 0
            ;;
        list)
            echo "Fetching all available actions..."
            curl -s "${CUSTOM_API}/list" | jq '.count'
            echo "Use 'ij --search <query>' to search for specific actions"
            exit 0
            ;;
        history)
            LIMIT="${1:-50}"
            curl -s "${CUSTOM_API}/history?limit=$LIMIT" | jq '.'
            exit 0
            ;;
        stats)
            if [ $# -gt 0 ]; then
                # Get stats for specific action
                curl -s "${CUSTOM_API}/stats?action=$1" | jq '.'
            else
                # Get top actions
                curl -s "${CUSTOM_API}/stats" | jq '.'
            fi
            exit 0
            ;;
        suggestions)
            curl -s "${CUSTOM_API}/suggestions" | jq '.'
            exit 0
            ;;
    esac
fi

# Parse remaining arguments (actions with possible pipes)
ACTIONS_STRING=""
if [ $# -gt 0 ]; then
    # Join all remaining arguments
    ACTIONS_STRING="$*"
fi

# Check if at least one action is provided
if [ -z "$ACTIONS_STRING" ] && [ "$CONDITIONAL_MODE" != "if-then-else" ]; then
    echo "Usage: ij [options] <action> [action2] [action3] ..."
    echo ""
    echo "Fire-and-forget options:"
    echo "  -d, --detach     Fire and forget - send request and exit immediately"
    echo "  -q, --quiet      Suppress all output"
    echo "  -f, --force      Continue chain even if actions fail"
    echo ""
    echo "Conditional options:"
    echo "  -ie, --if-editor          If editor is open"
    echo "  -if, --if-file            If file is open"
    echo "  -ip, --if-project         If project is open"
    echo "  -ia <action>, --if-action <action>  If action is enabled"
    echo "  -iw <window>, --if-window <window>  If tool window is active"
    echo "  --then <actions>          Actions to run if condition is true"
    echo "  --else <actions>          Actions to run if condition is false"
    echo ""
    echo "Operators:"
    echo "  ,                Sequence (AND) - stops on failure"
    echo "  |                Alternative (OR) - try until one succeeds"
    echo ""
    echo "Execution options:"
    echo "  --force-builtin  Use built-in API instead of custom server"
    echo ""
    echo "Discovery options:"
    echo "  --search <query>  Search for actions matching query"
    echo "  --explain <action>  Show action requirements and description"
    echo "  --list  Show count of all available actions"
    echo ""
    echo "Analytics options:"
    echo "  --history [limit]  Show recent execution history (default: 50)"
    echo "  --stats [action]  Show statistics for all or specific action"
    echo "  --suggestions  Show usage suggestions and patterns"
    echo ""
    echo "Examples:"
    echo "  ij About"
    echo "  ij SaveAll,ReformatCode                    # Sequential actions"
    echo "  ij Git.Pull | Git.Fetch | ShowSettings     # OR fallback"
    echo "  ij -ie --then SaveAll --else OpenFile      # Conditional"
    echo "  ij -ia Git.Pull --then Git.Pull,Git.Push   # Check action enabled"
    echo "  ij -d SaveAll                              # Fire and forget"
    echo "  ij -dq SaveAll,ReformatCode                # Detached + quiet"
    echo "  ij -f Action1,Action2                       # Continue on failures"
    echo "  ij --search format"
    echo "  ij --explain ReformatCode"
    echo ""
    echo "Common actions:"
    echo "  About, ShowSettings, SaveAll, ReformatCode, OptimizeImports"
    echo "  FindInPath, GotoDeclaration, Run, Debug, ToggleBookmark"
    exit 1
fi

# Build the URL path based on mode and actions
if [ "$CONDITIONAL_MODE" = "if-then-else" ]; then
    # Conditional execution
    URL_PATH="/execute/conditional?if=$IF_CHECK"
    [ -n "$THEN_ACTIONS" ] && URL_PATH="${URL_PATH}&then=$THEN_ACTIONS"
    [ -n "$ELSE_ACTIONS" ] && URL_PATH="${URL_PATH}&else=$ELSE_ACTIONS"
elif [[ "$ACTIONS_STRING" == *"|"* ]]; then
    # OR chain execution - replace spaces around pipes with just pipes
    CLEAN_ACTIONS=$(echo "$ACTIONS_STRING" | sed 's/ *| */|/g')
    URL_PATH="/execute/conditional?actions=${CLEAN_ACTIONS}"
else
    # Regular execution
    if [ -n "$ACTIONS_STRING" ]; then
        # Check if it's a single action or multiple
        if [[ "$ACTIONS_STRING" == *","* ]] || [[ "$ACTIONS_STRING" == *" "* ]]; then
            # Multiple actions - replace spaces with commas
            ACTIONS=$(echo "$ACTIONS_STRING" | tr ' ' ',')
            URL_PATH="/execute?actions=${ACTIONS}"
        else
            # Single action
            URL_PATH="/execute?action=$ACTIONS_STRING"
        fi
    else
        echo "Error: No actions specified"
        exit 1
    fi
fi

# Add force parameter if force mode is enabled
if [ "$FORCE_MODE" = true ]; then
    URL_PATH="${URL_PATH}&force=true"
fi

# Handle detach mode - fire and forget
if [ "$DETACH_MODE" = true ]; then
    if [ "$QUIET_MODE" = true ]; then
        # Detach + quiet: complete silence
        curl -s "${CUSTOM_API}${URL_PATH}" >/dev/null 2>&1 &
    else
        # Detach only: minimal output
        echo "â†’ Detached: $*"
        curl -s "${CUSTOM_API}${URL_PATH}" >/dev/null 2>&1 &
    fi
    exit 0
fi

# Function to execute request
execute_request() {
    local API_BASE=$1
    local RESPONSE=$(curl -s -m 2 "${API_BASE}${URL_PATH}" 2>&1)
    local EXIT_CODE=$?
    
    if [ $EXIT_CODE -eq 0 ]; then
        # Check for rate limiting error
        if echo "$RESPONSE" | grep -q "429 Too Many Requests"; then
            echo "rate_limited"
            return 1
        fi
        # Check if response indicates success
        if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "$RESPONSE"
            return 0
        elif echo "$RESPONSE" | grep -q '"success":false'; then
            echo "$RESPONSE"
            return 2
        fi
    fi
    echo "connection_failed"
    return 1
}

# Try custom server first (unless forced to use built-in)
SUCCESS=false
if [ "$FORCE_BUILTIN" = false ]; then
    RESPONSE=$(execute_request "$CUSTOM_API")
    RESULT=$?
    
    if [ $RESULT -eq 0 ]; then
        if [ "$QUIET_MODE" = false ]; then
            echo "âœ“ Action executed: $*"
        fi
        SUCCESS=true
    elif [ $RESULT -eq 2 ]; then
        if [ "$QUIET_MODE" = false ]; then
            echo "âœ— Action failed: $*"
            echo "Response: $RESPONSE"
        fi
        # Only exit on failure if not in force mode
        if [ "$FORCE_MODE" = false ]; then
            exit 1
        fi
    fi
fi

# If custom server failed or force built-in, try built-in API
if [ "$SUCCESS" = false ]; then
    RESPONSE=$(execute_request "$BUILTIN_API")
    RESULT=$?
    
    if [ $RESULT -eq 0 ]; then
        if [ "$QUIET_MODE" = false ]; then
            echo "âœ“ Action executed: $*"
        fi
    elif [ "$RESULT" -eq 2 ]; then
        if [ "$QUIET_MODE" = false ]; then
            echo "âœ— Action failed: $*"
            echo "Response: $RESPONSE"
        fi
        if [ "$FORCE_MODE" = false ]; then
            exit 1
        fi
    elif echo "$RESPONSE" | grep -q "rate_limited"; then
        if [ "$QUIET_MODE" = false ]; then
            echo "âœ— Rate limited. The custom server may not be running."
            echo "Try restarting IntelliJ or wait before retrying."
        fi
        if [ "$FORCE_MODE" = false ]; then
            exit 1
        fi
    else
        if [ "$QUIET_MODE" = false ]; then
            echo "Error: Failed to connect to IntelliJ"
            echo "Make sure IntelliJ IDEA is running with the Action Executor plugin"
        fi
        if [ "$FORCE_MODE" = false ]; then
            exit 1
        fi
    fi
fi