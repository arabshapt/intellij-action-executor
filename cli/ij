#!/bin/bash

# IntelliJ Action CLI
# Direct HTTP interface to IntelliJ actions
# Usage: ij <action> [action2] [action3] ...
# Example: ij About
# Example: ij SaveAll ReformatCode

# Custom server (no rate limiting)
CUSTOM_API="http://localhost:63343/api/intellij-actions"
# Built-in IntelliJ API (may have rate limiting)
BUILTIN_API="http://localhost:63342/api/intellij-actions"

# Check for flags
FORCE_BUILTIN=false
DISCOVERY_MODE=""

# Parse flags
while [[ "$1" == --* ]]; do
    case "$1" in
        --force-builtin)
            FORCE_BUILTIN=true
            shift
            ;;
        --search)
            DISCOVERY_MODE="search"
            shift
            break
            ;;
        --explain)
            DISCOVERY_MODE="explain"
            shift
            break
            ;;
        --list)
            DISCOVERY_MODE="list"
            shift
            break
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Handle discovery modes
if [ -n "$DISCOVERY_MODE" ]; then
    case "$DISCOVERY_MODE" in
        search)
            if [ $# -eq 0 ]; then
                echo "Usage: ij --search <query>"
                exit 1
            fi
            curl -s "${CUSTOM_API}/search?q=$1" | jq '.'
            exit 0
            ;;
        explain)
            if [ $# -eq 0 ]; then
                echo "Usage: ij --explain <action>"
                exit 1
            fi
            curl -s "${CUSTOM_API}/explain?action=$1" | jq '.'
            exit 0
            ;;
        list)
            echo "Fetching all available actions..."
            curl -s "${CUSTOM_API}/list" | jq '.count'
            echo "Use 'ij --search <query>' to search for specific actions"
            exit 0
            ;;
    esac
fi

# Check if at least one action is provided
if [ $# -eq 0 ]; then
    echo "Usage: ij [options] <action> [action2] [action3] ..."
    echo ""
    echo "Execution options:"
    echo "  --force-builtin  Use built-in API instead of custom server"
    echo ""
    echo "Discovery options:"
    echo "  --search <query>  Search for actions matching query"
    echo "  --explain <action>  Show action requirements and description"
    echo "  --list  Show count of all available actions"
    echo ""
    echo "Examples:"
    echo "  ij About"
    echo "  ij SaveAll ReformatCode"
    echo "  ij --search format"
    echo "  ij --explain ReformatCode"
    echo ""
    echo "Common actions:"
    echo "  About, ShowSettings, SaveAll, ReformatCode, OptimizeImports"
    echo "  FindInPath, GotoDeclaration, Run, Debug, ToggleBookmark"
    exit 1
fi

# Build the URL path based on number of actions
if [ $# -eq 1 ]; then
    # Single action
    URL_PATH="/execute?action=$1"
else
    # Multiple actions
    ACTIONS=$(IFS=,; echo "$*")
    URL_PATH="/execute?actions=${ACTIONS}"
fi

# Function to execute request
execute_request() {
    local API_BASE=$1
    local RESPONSE=$(curl -s -m 2 "${API_BASE}${URL_PATH}" 2>&1)
    local EXIT_CODE=$?
    
    if [ $EXIT_CODE -eq 0 ]; then
        # Check for rate limiting error
        if echo "$RESPONSE" | grep -q "429 Too Many Requests"; then
            echo "rate_limited"
            return 1
        fi
        # Check if response indicates success
        if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "$RESPONSE"
            return 0
        elif echo "$RESPONSE" | grep -q '"success":false'; then
            echo "$RESPONSE"
            return 2
        fi
    fi
    echo "connection_failed"
    return 1
}

# Try custom server first (unless forced to use built-in)
SUCCESS=false
if [ "$FORCE_BUILTIN" = false ]; then
    RESPONSE=$(execute_request "$CUSTOM_API")
    RESULT=$?
    
    if [ $RESULT -eq 0 ]; then
        echo "✓ Action executed: $*"
        SUCCESS=true
    elif [ $RESULT -eq 2 ]; then
        echo "✗ Action failed: $*"
        echo "Response: $RESPONSE"
        exit 1
    fi
fi

# If custom server failed or force built-in, try built-in API
if [ "$SUCCESS" = false ]; then
    RESPONSE=$(execute_request "$BUILTIN_API")
    RESULT=$?
    
    if [ $RESULT -eq 0 ]; then
        echo "✓ Action executed: $*"
    elif [ "$RESULT" -eq 2 ]; then
        echo "✗ Action failed: $*"
        echo "Response: $RESPONSE"
        exit 1
    elif echo "$RESPONSE" | grep -q "rate_limited"; then
        echo "✗ Rate limited. The custom server may not be running."
        echo "Try restarting IntelliJ or wait before retrying."
        exit 1
    else
        echo "Error: Failed to connect to IntelliJ"
        echo "Make sure IntelliJ IDEA is running with the Action Executor plugin"
        exit 1
    fi
fi